name: Build Go Project and Create Release

permissions:
    contents: write
    
on:
  push:
    branches: [release]
  pull_request:
    branches: [release]

jobs:
  build_and_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
        arch: [amd64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.20.x'

    - name: Build Project
      steps: 
        - name: Linux
          if: matrix.os == 'ubuntu-20.04'
          run: |
          go build -o tgpt-linux-amd64
          GOARCH=386 go build -o tgpt-linux-i386
          GOARCH=arm64 go build -o tgpt-linux-arm64
        
        - name: MacOS
          if: matrix.os == 'macos-latest'
          run: |
          GOOS=darwin GOARCH=amd64 go build -o tgpt-mac-amd64
          GOOS=darwin GOARCH=arm64 go build -o tgpt-mac-arm64
        
        - name: Windows
          if: matrix.os == 'windows-latest'
          run: |
          GOOS=windows GOARCH=amd64 go build -o tgpt-amd64.exe
          GOOS=windows GOARCH=386 go build -o tgpt-i386.exe

       

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: true

    - name: Upload Artifacts
      id: upload-artifacts
      uses: actions/upload-artifact@v2
      with:
        name: myapp-binaries
        path: |
          tgpt-linux-amd64
          tgpt-linux-i386
          tgpt-linux-arm64
          tgpt-amd64.exe
          tgpt-i386.exe
          tgpt-mac-amd64
          tgpt-mac-arm64

    - name: Attach Artifacts to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.upload-artifacts.outputs.myapp-binaries }}
        asset_name: myapp-${{ matrix.os }}-${{ matrix.arch }}
        asset_content_type: application/octet-stream
